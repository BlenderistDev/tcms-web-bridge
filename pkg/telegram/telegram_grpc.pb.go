// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package telegram

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelegramClient is the client API for Telegram service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelegramClient interface {
	Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*Result, error)
	Sign(ctx context.Context, in *SignMessage, opts ...grpc.CallOption) (*Result, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Result, error)
	GetDialogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DialogsResponse, error)
	MuteUser(ctx context.Context, in *MuteUserRequest, opts ...grpc.CallOption) (*Result, error)
	MuteChat(ctx context.Context, in *MuteChatRequest, opts ...grpc.CallOption) (*Result, error)
}

type telegramClient struct {
	cc grpc.ClientConnInterface
}

func NewTelegramClient(cc grpc.ClientConnInterface) TelegramClient {
	return &telegramClient{cc}
}

func (c *telegramClient) Login(ctx context.Context, in *LoginMessage, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) Sign(ctx context.Context, in *SignMessage, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) Send(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) GetDialogs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DialogsResponse, error) {
	out := new(DialogsResponse)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/getDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) MuteUser(ctx context.Context, in *MuteUserRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/MuteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telegramClient) MuteChat(ctx context.Context, in *MuteChatRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/telegram.Telegram/MuteChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelegramServer is the server API for Telegram service.
// All implementations must embed UnimplementedTelegramServer
// for forward compatibility
type TelegramServer interface {
	Login(context.Context, *LoginMessage) (*Result, error)
	Sign(context.Context, *SignMessage) (*Result, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	Send(context.Context, *SendMessageRequest) (*Result, error)
	GetDialogs(context.Context, *emptypb.Empty) (*DialogsResponse, error)
	MuteUser(context.Context, *MuteUserRequest) (*Result, error)
	MuteChat(context.Context, *MuteChatRequest) (*Result, error)
	mustEmbedUnimplementedTelegramServer()
}

// UnimplementedTelegramServer must be embedded to have forward compatible implementations.
type UnimplementedTelegramServer struct {
}

func (UnimplementedTelegramServer) Login(context.Context, *LoginMessage) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTelegramServer) Sign(context.Context, *SignMessage) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedTelegramServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTelegramServer) Send(context.Context, *SendMessageRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedTelegramServer) GetDialogs(context.Context, *emptypb.Empty) (*DialogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogs not implemented")
}
func (UnimplementedTelegramServer) MuteUser(context.Context, *MuteUserRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteUser not implemented")
}
func (UnimplementedTelegramServer) MuteChat(context.Context, *MuteChatRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteChat not implemented")
}
func (UnimplementedTelegramServer) mustEmbedUnimplementedTelegramServer() {}

// UnsafeTelegramServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelegramServer will
// result in compilation errors.
type UnsafeTelegramServer interface {
	mustEmbedUnimplementedTelegramServer()
}

func RegisterTelegramServer(s grpc.ServiceRegistrar, srv TelegramServer) {
	s.RegisterService(&Telegram_ServiceDesc, srv)
}

func _Telegram_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).Login(ctx, req.(*LoginMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).Sign(ctx, req.(*SignMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).Send(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_GetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).GetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/getDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).GetDialogs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_MuteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).MuteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/MuteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).MuteUser(ctx, req.(*MuteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Telegram_MuteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelegramServer).MuteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telegram.Telegram/MuteChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelegramServer).MuteChat(ctx, req.(*MuteChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Telegram_ServiceDesc is the grpc.ServiceDesc for Telegram service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telegram_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telegram.Telegram",
	HandlerType: (*TelegramServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Telegram_Login_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _Telegram_Sign_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Telegram_GetUser_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Telegram_Send_Handler,
		},
		{
			MethodName: "getDialogs",
			Handler:    _Telegram_GetDialogs_Handler,
		},
		{
			MethodName: "MuteUser",
			Handler:    _Telegram_MuteUser_Handler,
		},
		{
			MethodName: "MuteChat",
			Handler:    _Telegram_MuteChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/telegram.proto",
}

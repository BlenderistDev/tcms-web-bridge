// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tcms/tcms_grpc.pb.go

// Package mock_tcms is a generated GoMock package.
package mock_tcms

import (
	context "context"
	reflect "reflect"
	tcms "tcms-web-bridge/pkg/tcms"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockTcmsClient is a mock of TcmsClient interface.
type MockTcmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockTcmsClientMockRecorder
}

// MockTcmsClientMockRecorder is the mock recorder for MockTcmsClient.
type MockTcmsClientMockRecorder struct {
	mock *MockTcmsClient
}

// NewMockTcmsClient creates a new mock instance.
func NewMockTcmsClient(ctrl *gomock.Controller) *MockTcmsClient {
	mock := &MockTcmsClient{ctrl: ctrl}
	mock.recorder = &MockTcmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTcmsClient) EXPECT() *MockTcmsClientMockRecorder {
	return m.recorder
}

// AddAutomation mocks base method.
func (m *MockTcmsClient) AddAutomation(ctx context.Context, in *tcms.Automation, opts ...grpc.CallOption) (*tcms.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAutomation", varargs...)
	ret0, _ := ret[0].(*tcms.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAutomation indicates an expected call of AddAutomation.
func (mr *MockTcmsClientMockRecorder) AddAutomation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAutomation", reflect.TypeOf((*MockTcmsClient)(nil).AddAutomation), varargs...)
}

// GetActionList mocks base method.
func (m *MockTcmsClient) GetActionList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*tcms.ActionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetActionList", varargs...)
	ret0, _ := ret[0].(*tcms.ActionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionList indicates an expected call of GetActionList.
func (mr *MockTcmsClientMockRecorder) GetActionList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionList", reflect.TypeOf((*MockTcmsClient)(nil).GetActionList), varargs...)
}

// GetConditionList mocks base method.
func (m *MockTcmsClient) GetConditionList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*tcms.ConditionList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConditionList", varargs...)
	ret0, _ := ret[0].(*tcms.ConditionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConditionList indicates an expected call of GetConditionList.
func (mr *MockTcmsClientMockRecorder) GetConditionList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditionList", reflect.TypeOf((*MockTcmsClient)(nil).GetConditionList), varargs...)
}

// GetList mocks base method.
func (m *MockTcmsClient) GetList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*tcms.AutomationList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetList", varargs...)
	ret0, _ := ret[0].(*tcms.AutomationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockTcmsClientMockRecorder) GetList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockTcmsClient)(nil).GetList), varargs...)
}

// GetOne mocks base method.
func (m *MockTcmsClient) GetOne(ctx context.Context, in *tcms.AutomationRequest, opts ...grpc.CallOption) (*tcms.Automation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOne", varargs...)
	ret0, _ := ret[0].(*tcms.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockTcmsClientMockRecorder) GetOne(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockTcmsClient)(nil).GetOne), varargs...)
}

// GetTriggerList mocks base method.
func (m *MockTcmsClient) GetTriggerList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*tcms.TriggerList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTriggerList", varargs...)
	ret0, _ := ret[0].(*tcms.TriggerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerList indicates an expected call of GetTriggerList.
func (mr *MockTcmsClientMockRecorder) GetTriggerList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerList", reflect.TypeOf((*MockTcmsClient)(nil).GetTriggerList), varargs...)
}

// RemoveAutomation mocks base method.
func (m *MockTcmsClient) RemoveAutomation(ctx context.Context, in *tcms.RemoveAutomationRequest, opts ...grpc.CallOption) (*tcms.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveAutomation", varargs...)
	ret0, _ := ret[0].(*tcms.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAutomation indicates an expected call of RemoveAutomation.
func (mr *MockTcmsClientMockRecorder) RemoveAutomation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAutomation", reflect.TypeOf((*MockTcmsClient)(nil).RemoveAutomation), varargs...)
}

// UpdateAutomation mocks base method.
func (m *MockTcmsClient) UpdateAutomation(ctx context.Context, in *tcms.UpdateAutomationRequest, opts ...grpc.CallOption) (*tcms.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAutomation", varargs...)
	ret0, _ := ret[0].(*tcms.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAutomation indicates an expected call of UpdateAutomation.
func (mr *MockTcmsClientMockRecorder) UpdateAutomation(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomation", reflect.TypeOf((*MockTcmsClient)(nil).UpdateAutomation), varargs...)
}

// MockTcmsServer is a mock of TcmsServer interface.
type MockTcmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockTcmsServerMockRecorder
}

// MockTcmsServerMockRecorder is the mock recorder for MockTcmsServer.
type MockTcmsServerMockRecorder struct {
	mock *MockTcmsServer
}

// NewMockTcmsServer creates a new mock instance.
func NewMockTcmsServer(ctrl *gomock.Controller) *MockTcmsServer {
	mock := &MockTcmsServer{ctrl: ctrl}
	mock.recorder = &MockTcmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTcmsServer) EXPECT() *MockTcmsServerMockRecorder {
	return m.recorder
}

// AddAutomation mocks base method.
func (m *MockTcmsServer) AddAutomation(arg0 context.Context, arg1 *tcms.Automation) (*tcms.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAutomation", arg0, arg1)
	ret0, _ := ret[0].(*tcms.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAutomation indicates an expected call of AddAutomation.
func (mr *MockTcmsServerMockRecorder) AddAutomation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAutomation", reflect.TypeOf((*MockTcmsServer)(nil).AddAutomation), arg0, arg1)
}

// GetActionList mocks base method.
func (m *MockTcmsServer) GetActionList(arg0 context.Context, arg1 *emptypb.Empty) (*tcms.ActionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionList", arg0, arg1)
	ret0, _ := ret[0].(*tcms.ActionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionList indicates an expected call of GetActionList.
func (mr *MockTcmsServerMockRecorder) GetActionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionList", reflect.TypeOf((*MockTcmsServer)(nil).GetActionList), arg0, arg1)
}

// GetConditionList mocks base method.
func (m *MockTcmsServer) GetConditionList(arg0 context.Context, arg1 *emptypb.Empty) (*tcms.ConditionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditionList", arg0, arg1)
	ret0, _ := ret[0].(*tcms.ConditionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConditionList indicates an expected call of GetConditionList.
func (mr *MockTcmsServerMockRecorder) GetConditionList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditionList", reflect.TypeOf((*MockTcmsServer)(nil).GetConditionList), arg0, arg1)
}

// GetList mocks base method.
func (m *MockTcmsServer) GetList(arg0 context.Context, arg1 *emptypb.Empty) (*tcms.AutomationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", arg0, arg1)
	ret0, _ := ret[0].(*tcms.AutomationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockTcmsServerMockRecorder) GetList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockTcmsServer)(nil).GetList), arg0, arg1)
}

// GetOne mocks base method.
func (m *MockTcmsServer) GetOne(arg0 context.Context, arg1 *tcms.AutomationRequest) (*tcms.Automation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(*tcms.Automation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockTcmsServerMockRecorder) GetOne(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockTcmsServer)(nil).GetOne), arg0, arg1)
}

// GetTriggerList mocks base method.
func (m *MockTcmsServer) GetTriggerList(arg0 context.Context, arg1 *emptypb.Empty) (*tcms.TriggerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTriggerList", arg0, arg1)
	ret0, _ := ret[0].(*tcms.TriggerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTriggerList indicates an expected call of GetTriggerList.
func (mr *MockTcmsServerMockRecorder) GetTriggerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTriggerList", reflect.TypeOf((*MockTcmsServer)(nil).GetTriggerList), arg0, arg1)
}

// RemoveAutomation mocks base method.
func (m *MockTcmsServer) RemoveAutomation(arg0 context.Context, arg1 *tcms.RemoveAutomationRequest) (*tcms.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAutomation", arg0, arg1)
	ret0, _ := ret[0].(*tcms.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveAutomation indicates an expected call of RemoveAutomation.
func (mr *MockTcmsServerMockRecorder) RemoveAutomation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAutomation", reflect.TypeOf((*MockTcmsServer)(nil).RemoveAutomation), arg0, arg1)
}

// UpdateAutomation mocks base method.
func (m *MockTcmsServer) UpdateAutomation(arg0 context.Context, arg1 *tcms.UpdateAutomationRequest) (*tcms.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAutomation", arg0, arg1)
	ret0, _ := ret[0].(*tcms.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAutomation indicates an expected call of UpdateAutomation.
func (mr *MockTcmsServerMockRecorder) UpdateAutomation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAutomation", reflect.TypeOf((*MockTcmsServer)(nil).UpdateAutomation), arg0, arg1)
}

// mustEmbedUnimplementedTcmsServer mocks base method.
func (m *MockTcmsServer) mustEmbedUnimplementedTcmsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTcmsServer")
}

// mustEmbedUnimplementedTcmsServer indicates an expected call of mustEmbedUnimplementedTcmsServer.
func (mr *MockTcmsServerMockRecorder) mustEmbedUnimplementedTcmsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTcmsServer", reflect.TypeOf((*MockTcmsServer)(nil).mustEmbedUnimplementedTcmsServer))
}

// MockUnsafeTcmsServer is a mock of UnsafeTcmsServer interface.
type MockUnsafeTcmsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeTcmsServerMockRecorder
}

// MockUnsafeTcmsServerMockRecorder is the mock recorder for MockUnsafeTcmsServer.
type MockUnsafeTcmsServerMockRecorder struct {
	mock *MockUnsafeTcmsServer
}

// NewMockUnsafeTcmsServer creates a new mock instance.
func NewMockUnsafeTcmsServer(ctrl *gomock.Controller) *MockUnsafeTcmsServer {
	mock := &MockUnsafeTcmsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeTcmsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeTcmsServer) EXPECT() *MockUnsafeTcmsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedTcmsServer mocks base method.
func (m *MockUnsafeTcmsServer) mustEmbedUnimplementedTcmsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedTcmsServer")
}

// mustEmbedUnimplementedTcmsServer indicates an expected call of mustEmbedUnimplementedTcmsServer.
func (mr *MockUnsafeTcmsServerMockRecorder) mustEmbedUnimplementedTcmsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedTcmsServer", reflect.TypeOf((*MockUnsafeTcmsServer)(nil).mustEmbedUnimplementedTcmsServer))
}
